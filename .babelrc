{ 
  // preset是从右往左执行，plugin是从左往右执行，并且plugin先于preset。
  "presets": [ 
    [
      "@babel/preset-env", {
        // 将 ES6 module 转换为其他模块规范，可选 "adm" | "umd" | "systemjs" | "commonjs" | "cjs" | false，默认为 false
        "modules": false,
        // 根据项目使用和浏览器target 按需使用polyfill
        "useBuiltIns": "usage",  // usage-按需引入 entry-入口引入（整体引入） false-不引入polyfill 
        // 仅当与useBuiltIns: usage或一起使用时有效果, 支持第三阶段提案
        "corejs": 3
      }
    ],
    "@babel/preset-react",
    "@babel/typescript"
  ],
  "plugins": [
    // 按需引入
    ["import", { "libraryName": "antd", "libraryDirectory": "lib", "style": "css"}, "ant"],
    // 解决装饰器
    ["@babel/plugin-proposal-decorators", { "legacy": true }],
    // https://babeljs.io/docs/en/babel-plugin-transform-runtime#docsNav
    // 为api提供沙箱的垫片方案，不会污染全局的api
    ["@babel/plugin-transform-runtime", {
      // "absoluteRuntime": false,
      // "corejs": 3,  // 是否打开 coreJs 请和 useBuiltIns 二选一，transform适合用在类库开发上， preset-env 适合个人项目
      "helpers": true,
      "regenerator": false, // 通过 preset-env 已经使用了全局的 regeneratorRuntime, 不再需要 transform-runtime 提供的 不污染全局的 regeneratorRuntime 
      "useESModules": true // 使用 es modules helpers, 减少 commonJS 语法代码 
    }],
    // 解析 class 语法
    "@babel/plugin-proposal-class-properties",
    // https://babeljs.io/docs/en/next/babel-plugin-syntax-dynamic-import.html
    // 用以解析识别import()动态导入语法 -- 也就是懒加载
    "@babel/plugin-syntax-dynamic-import", 
    // 添加 __self 作为props 到 jsx 元素上， react 会根据次作出一些警告
    "@babel/plugin-transform-react-jsx-self"
  ]
}


// 好文备用： 

// 不容错过的 Babel7 知识： https://juejin.im/post/5ddff3abe51d4502d56bd143?utm_source=gold_browser_extension

// Babel7 转码（四）- polyfill 还是 transform-runtime：  https://segmentfault.com/a/1190000020237790